= 前言

本書是關於程式語言本身，而非如何撰寫程式的著作。透過理解程式如何被執行的過程，學習關於程式語言的知識。那麼，為什麼會拿程式語言當成主題呢？

筆者所在的職場，有許多優秀的技術人員。但由於教育背景各自不同，很多人雖然會寫程式，卻欠缺對作為其基礎之資訊科學的了解。我寫這本書的動機，就是希望能夠指出一個方向，讓這些對寫程式有自信的人能夠更上一層樓。

閱讀本書，希望能夠帶來以下的效果：

* 深入了解程式語言為何，並因此提升程式功力。
* 在說「這個語言真好！」時，能夠區別自己指的是哪個部分，如 syntax 或 library 等，以及所謂好是好到什麼程度。
* 能夠理解程式是如何被執行的。
* 能夠理解函數程式語言（functional language）的中心概念。
* 能夠說明λ演算（lambda calculus）和閉包（closure）的不同。
* 做好閱讀資訊科學名作 SICP（註1）的準備。
* 能夠對朋友說「我有寫過函數程式語言的處理器喔」;-)

上述任何一項有吸引到您的話，您就是本書的目標讀者了。

為了要理解程式語言，我們接著要來開發一套名為 μSchemeR 的獨特語言。要理解事物本質的話，實際動手做是最有效的。我們決定要做的是小型的函數程式語言。這是因為它雖然做起來簡單，但有強大的功能，並且由於函數型語言是一般人不熟悉的編程典範，藉由對它的了解，也能夠增進程式方面的知識。

覺得內容好像很難，感到不安了嗎？絕對沒有這回事。這本書的知識來源，也就是上述的 SICP，是 MIT 資訊科學入門課程的教材。筆者在學生時代，一進研究室也是馬上被要求要讀這本書。對資科人來說，這本書是大家共同的基本，也正因為如此，筆者才想讓大家知道它的內容。本書雖然預期讀者會具有某種程度的程式能力，但究竟是哪種程度又無法得知，因此是以希望能讓任何有興趣的人都能夠理解的角度來寫的。

用來實作 μSchemeR 的語言，則是選定 Ruby。Ruby 是很多人熟悉的程序式編程語言（procedural language），功能強大，有助於我們簡潔地說明問題的本質。您不需要精通 Ruby，就算只會 Ruby 的簡單功能也沒有關係，文章裡都會有相關說明，請安心閱讀。

本書會花費很多篇幅說明「為什麼需要這樣做」，因為我認為這是能夠理解問題本質的捷徑。直接給正確答案雖然很簡單，但為什麼這是正確答案？是如何得出這個答案的？問題是什麼？這樣就會不得而知了。因此，書中會先舉出失敗的例子，在理解了問題是什麼之後，再說明解決的方式。

書中出現的程式碼，只要 copy/paste 就可以執行，可以用來確認程式的運作。但如果是認真想學的話，還是請盡量自己動手寫寫看。在研讀範例之後，最好不要照抄，這樣才能知道自己到底還有哪個部分沒有理解透徹。

另外，本書是以 Creative Commons 3.0 姓名標示授權公開，在授權範圍之內允許重製、散布。如果能夠有效活用在後進的教育訓練之上，筆者將感到無比欣慰。在寫這本書的過程中，我深刻體認到了教導別人也正是自己學習的捷徑的道理。

本書的完成也受到了許多人的幫助。特別是堂阪真司先生，包括 Ruby 的寫作方式在內，他教了我很多，在此致上謝意。另外，也要感謝爽快允諾出版本書，達人出版會的高橋征義先生。

前言寫得有點太長了。那麼，我們就開始吧。


//footnote[fn1][Structure and Interpretaion of Computer Programs 2nd ed.: 中文譯本 電腦程式的構造和解釋　第二版（簡體中文）]