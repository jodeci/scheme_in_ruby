= 次のステップ

== Scheme in μSchemeRにチャレンジ

既にみなさんは関数型言語の本質は理解していますが、まだ関数型言語のプログラミングに慣れているとは言えません。プログラミングは書いて慣れるものですので、プログラミング言語の原理を理解しているだけでは不十分です。様々なプログラムを書いてみて、その考え方を学んでください。

その教材を一つご紹介します。今回はRubyを用いてSchemeのサブセットを実現しました。このRubyのプログラムをSchemeで書いて見ましょう。しかも、ただSchemeで書くのはつまらないので、今回開発したμSchemeRで動作させて下さい。これが実現すれば、Ruby上でμSchemeRが動き、その上で今回作成する(今回Rubyで作成したのと同等の)Scheme処理系が動き、その上でユーザが与えたSchemeプログラムが解釈、実行されることになります。想像しただけでエキサイティングになりませんか。

足りない機能があれば、μSchemeRの処理系をRubyで書き足しながら実現してみてください。

実現する上でのヒントです。2ヵ所で代入が必要になります。@<tt>{letrec}と@<tt>{define}です。代入を実現する@<tt>{:set!}は次のとおり実現できます。与えられた変数を与えられた値に束縛するよう環境を書き換えるものです。@<tt>{define}と異なる点は、代入する変数がまだ使われていない場合エラーとする所です。@<tt>{special_form?}、@<tt>{eval_special_form}も書き換えるのを忘れないで下さい。

//emlist{
def eval_set!(exp, env)
  var, val = setq_to_var_val(exp)
  var_ref = lookup_var_ref(var, env)
  if var_ref != nil
    var_ref[var] = _eval(val, env)
  else
    raise "undefined variable:'#{var}'"    
  end
  nil
end

def setq_to_var_val(exp)
  [exp[1], exp[2]]
end

def setq?(exp)
  exp[0] == :setq
end
//}

//emlist{
(let ((x 1)) (let ((dummy (set! x 2))) x))
//}

2ヵ所で代入が必要と言いましたが、逆に言えばそれ以外の場所で代入は使ってはいけません。関数型言語の醍醐味を存分楽しんで下さい。

====[column] クロージャの応用

副作用とクロージャを利用して興味深い例をお見せします。次のコードを考えてみてください。

//emlist{
(define (makecounter)
  (let ((count 0))
    (lambda ()
      (let ((dummy (set! count (+ count 1))))
    count))))
(define inc (makecounter))
(inc)
(inc)
//}

このコードでは、カウンタを作る@<tt>{makecounter}を定義しています。@<tt>{makecounter}を関数適用した返り値はクロージャで、これを@<tt>{inc}として定義します。このクロージャは、変数@<tt>{count}の値に1加えて、その値を返すものです。このクロージャのλ式の外で@<tt>{count}が宣言されているにも関わらず、@<tt>{inc}を呼び出すと、その値が追加されるところに注意してください。クロージャはλ式を評価したときの環境を保持しているので、このようなことができるのです。

また、見方を変えると、@<tt>{makecounter}でオブジェクトを生成し、このオブジェクトは@<tt>{inc}のメッセージで呼び出せ、その呼び出し毎に内部変数@<tt>{count}を利用して、その値を増加させていく、とも言えるでしょう。このように、内部状態をカプセル化したオブジェクトも簡単に作ることができるのです。


== SICPにチャレンジ

今のみなさんであれば、SICPと呼ばれる本、『Structure and Interpretaion of Computer Programs 2nd ed.』(訳本『計算機プログラムの構造と解釈 第2版@<bib>{SICP}』)を十分読める実力を持っています。

むしろアドバンテージがありますので、使っている機能をμSchemeRに実装していきながら読み進めるくらいの余裕があることでしょう。

SICPの後半では、この文書で行ったようにSchemeの処理系を実装します。それを使った言語機能の拡張は間違いなく、みなさんのためになります。ぜひトライしてみて下さい。


== シンタックスの変更

せっかく自分が作ったプログラミング言語なのにシンタックスがカッコ悪い(もしくはカッコが多い)と友達にバカにされませんでしたか? すでに十分プログラミング言語について理解しているあなたは「そんなのは見掛け上の文法の話で中身は変わらない。機能を見てくれ」と言うかもしれませんが、残念ながら反応はあまり変わりません。そこでクールなシンタックスに変えて見返してみましょう。I-expressionという記法があり@<fn>{fn1}、これはPythonのようにインデントで文法を解釈するというものです。

例えば、階乗を求めるプログラムは次のように書けます。カッコがずいぶん少なく、モダンな感じのプログラミング言語に見えませんか?

//emlist{
define (fact x)
 if (= x 0) 1
  * x
   fact (- x 1)
//}

これを次のようにして実現してみましょう。脚注のURLにI-Expressionを解釈するプログラムが記載されています。このプログラムを実行できるようにμSchemeRを拡張します。その後、拡張されたμSchemeRでI-expressionで書かれたプログラムを解釈し、得られたプログラムを、μSchemeで実行します。


//footnote[fn1][@<href>{http://srfi.schemers.org/srfi-49/srfi-49.html}]
